from unified_test.exceptions import UnifiedTestRequestException

__author__ = 'Vlad Schnakovszki'

import traceback

from django.http import HttpResponse
from unified_test import settings

import logging
#log = logging.getLogger("logger")


# Handles any exceptions generated by a request method in a consistent and simple way.
# To use, add @unified_test_api_request above the function declaration.
# To generate an error returned to a user, raise a UnifiedTestRequestException.
# It will generate a 400 error with the specified message if raised on purpose and
# a 500 message containing the exception if unexpected.
def unified_test_api_request(function):
    def handle_exceptions(request, *args, **kwargs):
        # Try to process the function.
        try:
            # Execute the function.
            return function(request, *args, **kwargs)
        except UnifiedTestRequestException as ex:
            # Exceptions raised on purpose.
            if settings.DEBUG:
                #log.debug(ex.message)
                print traceback.format_exc()
            return HttpResponse(ex.message, status=ex.response_code)
        except:
            # Unexpected exceptions.
            #log.error(traceback.format_exc())
            print traceback.format_exc()
            return HttpResponse("Something went wrong :( The problem details have been logged and will be investigated to prevent this problem in the future. "
                                "We apologise for the inconvenience", status=500)

    return handle_exceptions